; vim: noexpandtab:tabstop=4:shiftwidth=4:softtabstop=4

; defaults when not working inside ~/g (work folder) are for my personal account
[user]
	name = Fernando Lucio Canizo
	email = fernandocanizo@gmail.com

[github]
	user = fernandocanizo

[format]
	headers = "Content-Type: text/plain; charset=\"utf-8\""

[core]
	sshCommand = "ssh -i ~/.ssh/bytor-github-personal-rsa"

	editor = nvim
	excludesfile = /home/flc/.git/info/exclude
	; diff-so-fancy: requires `npm i -g diff-so-fancy`
	; No longer used as it just prettifies a normal single-page diff output 
	; I prefer side-by-side tools
	; pager = diff-so-fancy | less --tabs=4 -RX

	; Nicer than diff-so-fancy, but breaks my terminal see:
	; https://github.com/banga/git-split-diffs/issues/16
	; git-split-diffs: requires `npm i -g git-split-diffs`
	; No longer used, also a single-page diff
	; pager = git-split-diffs --color | less -RFX

	; delta requires `yay -S git-delta`
	; (the non git delta package is something completely unrelated)
	pager = delta

[delta]
	navigate = true  ; use n and N to move between diff sections
	side-by-side = true
	line-numbers = true

[interactive]
	diffFilter = delta --color-only

[merge]
	tool = meld
	conflictstyle = diff3

[diff]
	; `colorMoved` colorizes differently lines that moved around with unchanged
	; contents. However is not working with plain `diff` nor with `delta`
	colorMoved = zebra

	; Note: this overrides `pager` setting on the `core` section. Difftastic
	; (aka difft) cannot be used in the pager section, needs to be specified
	; here. Anyway, I prefer `delta`
	; external = difft

[alias]
	; open project origin url in browser
	gh = "!xdg-open `git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#http://#' -e 's@com:@com/@'`"

	recent = for-each-ref --sort=committerdate refs/heads/ --format=' %(color:blue) %(authorname) %(color:yellow)%(refname:short)%(color:reset)'

	ci = commit
	co = checkout
	st = status
	stat = status
	ls = ls-files

	short = log --oneline
	; like `short` but with dates
	shortdate = log --pretty=format:'%C(magenta)%h%Creset -  %Cblue%ad%Creset %C(bold red)%d%Creset %s' --date=short
	; like `short` but with author
	shortwho = log --pretty=format:'%C(magenta)%h%Creset - %C(cyan)<%an>%Creset %C(bold red)%d%Creset %s '

	; remove local and remote merged branches
	; Note: inside gitconfig we need to add an extra espace backslash to the '*'
	clean-local-branches = !git checkout main --quiet && git branch --merged | grep -E --invert-match '(\\*|main)' | xargs git branch -d
	clean-remote-branches = !git branch --remotes --merged | grep -E --invert-match '(main|HEAD)' | cut -f2 -d'/' | xargs -n 1 git push --delete origin

	; Sometimes you remove by hand branches on the website (github or
	; another) and locally there still exist a reference to a remote that
	; doesn't exist anymore. `git remote prune origin` gets ride of them
	clean-stale-remote-branches = !git remote prune origin
	clean-branches = !git clean-local-branches && git clean-remote-branches && git clean-stale-remote-branches

	; Safety first: checks that your local copy of the ref that youâ€™re
	; overwriting is up-to-date before overwriting it
	please = push --force-with-lease

	; initializes a repo and starts the log, it needs a single word as a commit
	; message, I don't know why
	it = !git init && git commit -m "StartProject" --allow-empty

	; don't loose branch history when merging to master
	merge-with-history = merge --no-ff

	; 2024-06-06: legit doesn't install anymore in my system, something related
	; to virtual envs or "python still doesn't know how to deal with installs"
	; legit needs to be installed before for these to work
	; `pipx install legit`
	; branches = !/home/flc/.local/bin/legit branches
	; publish = !/home/flc/.local/bin/legit publish
	; unpublish = !/home/flc/.local/bin/legit unpublish
	; switch = !/home/flc/.local/bin/legit switch
	; sync = !/home/flc/.local/bin/legit sync
	; `legit --install` put `resync`, however it's not in the help nor the site
	; docs, so I'm omitting it as I don't know what it does
	; resync = !/home/flc/.local/bin/legit resync
	; undo = !/home/flc/.local/bin/legit undo

[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = true
	pager = true

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[push]
	; choose your poison
	; Git versions < 2.0 : push every branch when no branch is specified
	; default = matching

	; Git 2.0 : push only current branch when no branch is specified
	default = simple

[init]
	defaultBranch = main

; [credential]
	; helper = !aws codecommit credential-helper $@
	; UseHttpPath = true

; git extension to index large files
; https://git-lfs.github.com
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[log]
	decorate = true
	abbrevCommit = true

[rebase]
	autostash = true

[pull]
	rebase = true

; Multiaccount configuration at the end so it overwrites previous stuff
; [includeIf "gitdir:~/g/"]
  ; path = ~/gitconfig-work

[maintenance]
	repo = /home/flc/my/smc/nexus2/third-nexus-client

[rerere]
	enabled = true

; friendly hints from git, but the ones you know by hart can be disable to have
; a less crowded output from some commands
[advice]
	skippedCherryPicks = false
	; pushUpdateRejected
	; pushNonFFCurrent
	; pushNonFFMatching
	; pushAlreadyExists
	; pushFetchFirst
	; pushNeedsForce
	; statusHints
	; statusUoption
	; commitBeforeMerge
	; resolveConflict
	; implicitIdentity
	; detachedHead
	; amWorkDir
	; rmHints
